	// 先序遍历
	public static void print(TreeNode root) {
		if (root == null)
			return;
		else {
			System.out.print(root.val + " ");
			print(root.left);
			print(root.right);
		}
	}
	// 中序遍历
	public static void print(TreeNode root) {
		if (root == null)
			return;
		else {
			print(root.left);
			System.out.print(root.val + " ");
			print(root.right);
		}
	}
	

//层次遍历
	public String print(TreeNode root) {
			if (root == null)
				return "";
			ArrayList<Integer> li = new ArrayList<Integer>();
			List<TreeNode> list = new ArrayList<TreeNode>();
			list.add(root);
			int i = 0, j = 1;
			while (i < list.size()) {
				j = list.size();
				while (i < j) {
					TreeNode p = list.get(i);
					if (p != null) {
						li.add(p.val);
						if (p.left != null) {
							list.add(p.left);
						} else
							list.add(null);
						if (p.right != null) {
							list.add(p.right);
						} else
							list.add(null);
					} else {
						li.add(null);
					}
					i++;
				}
			}
			return li.toString();
		}

		public TreeNode CreatTree(String data) {
			if (data.length() == 0)
				return null;
			ArrayList<Integer> li = d(data);
			TreeNode root = new TreeNode(li.get(0));
			List<TreeNode> list = new ArrayList<TreeNode>();
			list.add(root);
			int i = 1;
			while (i < li.size() && list.size() > 0) {
				TreeNode p = list.get(0);
				list.remove(0);
				if (li.get(i) != null) {
					p.left = new TreeNode(li.get(i));
					list.add(p.left);
				}
				i++;
				if (i < li.size() && li.get(i) != null) {
					p.right = new TreeNode(li.get(i));
					list.add(p.right);
				}
				i++;
			}
			return root;
		}
		public ArrayList<Integer> d(String data) {
			ArrayList<Integer> list = new ArrayList<Integer>();
			while (data.length() != 0) {
				while (data.charAt(0) != 'n'
						&& !(data.charAt(0) >= '0' && data.charAt(0) <= '9'))
					data = data.substring(1);
				int i = 0, k = 1;
				if (data.charAt(0) == 'n') {
					list.add(null);
					data = data.substring(5);
				} else {
					if (data.charAt(0) == '-') {
						k = -1;
						i++;
					}
					while (i < data.length() && data.charAt(i) != ','
							&& (data.charAt(i) >= '0' && data.charAt(i) <= '9')) {
						k *= data.charAt(i) - '0';
						i++;
					}
					list.add(k);
					if (i == data.length())
						return list;
					data = data.substring(++i);
				}
			}
			return list;
		}
主函数
TreeNode root = CreatTree("1,2,3,null,null,4,5");



二叉树
	public static class TreeNode {
		int val;
		TreeNode left;
		TreeNode right;
		TreeNode(int x) {
			val = x;
		}
	}

	public static TreeNode CreatTree(char[] array) {
		TreeNode root = new TreeNode(array[0] - 0);
		List<TreeNode> list = new ArrayList<TreeNode>();
		list.add(root);
		int i = 1;
		while (i < array.length) {
			TreeNode p = list.get(0);
			list.remove(0);
			if (array[i] != '#') {
				p.left = new TreeNode(array[i] - 0);
				list.add(p.left);
			}
			i++;
			if (i < array.length && array[i] != '#') {
				p.right = new TreeNode(array[i] - 0);
				list.add(p.right);
			}
			i++;
		}
		return root;
	}
主函数
char[] array = { 1, 2, 3, 4, 5, 6, 7, '#' };
TreeNode p = CreatTree(array);
